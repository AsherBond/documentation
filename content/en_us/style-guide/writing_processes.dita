<?xml version="1.0" encoding="UTF-8"?>
<!--This work by Eucalyptus Systems is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported License. See the accompanying LICENSE file for more information.-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="writing_processes">
	<title>Writing Processes</title>
 <shortdesc></shortdesc>
 <conbody>

 	<p>A process can answer the questions: How does it work?, What happens when?, and When do I need to do it? Because they can describe general sequences, processes are less rigorously defined than procedures are. For example, whereas procedures are comprised of a discrete collection of elemental instructions, processes have a variety of componentsâ€”of unequal complexity. The one basic rule is that a process must convey a cohesive whole that progresses over time. If the concept can't be expressed as a temporal sequence, then it isn't a process.</p>
 	
 	<section>
 		<title>Process Standards</title>
 		<ul>
 			<li>The content of processes can vary according to the situation and needs. Basically, however, a process should illustrate how a single concept works or flows. Anything extraneous to that one concept should be removed, or only briefly referred to.</li>
 			<li>Most processes are greatly enhanced with a diagram, which helps the reader see the entire concept at a glance. However, a diagram should supplement, not replace, written descriptions.</li>
 			<li>Mark up a process as an ordered list with special attributes. The XSL and CSS will handle the rest of the formatting.</li>
 			<li>Refer to a collection of different components as tasks. That is, a process that is a collection of tasks, procedures, and steps that should be collectively called tasks in the documentation.</li>
 		</ul>
 		
 
 		
 	</section>
 		
 		<section>
 			<title>Example Processes for Different Uses</title>
 		<sectiondiv>
 		
 		<p>This example is a simple enumeration of tasks that must be completed. It is not supported with any kind of graphic. The following sample code shows how the list is constructed.</p>
 		
 		<!--Launch Process
 		
 		Create an Amazon S3 bucket.
 		
 		Place your content in the Amazon S3 bucket.
 		
 		Launch an instance of your web server AMI.
 		
 		Specify the Amazon S3 bucket containing the web content.-->
 		
 		
 		<ol spectitle="Launch Process"> 
 			<li>Create a Walrus bucket.</li>
 			<li>Place your content in the Walrus bucket.</li>
 			<li>Launch an instance of your web server machine image. </li>
 			<li>Specify the Walrus bucket containing the web content.</li>
 		</ol>
 		</sectiondiv>
 		<!--Order Pipeline
 		
 		In this example, there is a graphic that uses callouts followed by a process table.
 		
 		[D]
 		
 		General Process of Authentication
 		
 		The sender obtains the necessary credential.
 		
 		The sender sends a request with the credential to the recipient.
 		
 		The recipient uses the credential to verify the sender truly sent the request.
 		
 		If yes, the recipient processes the request. If no, the recipient rejects the request and responds accordingly.
 		
 		Mech Turk Authentication
 		
 		This example shows a flow diagram and associated process. This table has no callouts because we don't use them in this kind of diagram.
 		
 		[D]
 		
 		Mechanical Turk Authentication Process
 		
 		The sender constructs a request to AWS.
 		
 		The sender calculates a Keyed Hashing for Message Authentication code (HMAC), the request signature, and the values of the Service, Operation, and Timestamp parameters as input.
 		
 		The sender of the request sends the request data, the signature, and Access Key ID (the key-identifier of the Secret Access Key used) to AWS.
 		
 		AWS uses the Access Key ID to look up the Secret Access Key.
 		
 		AWS generates a signature from the request data and the Secret Access Key using the same algorithm used to calculate the signature in the request.
 		
 		AWS compares the signature it has generated with the one embedded in the request.
 		
 		If the signature generated by AWS matches the one sent in the request, the request is considered to be authentic. If the comparison fails, the request is discarded, and AWS returns an error response.--></section>
 </conbody>
</concept>
