<?xml version="1.0" encoding="UTF-8"?>
<!--This work by Eucalyptus Systems is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported License. See the accompanying LICENSE file for more information.-->
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="task_rlf_sy4_b3">
    <title>Download Cloud Administrator Credentials </title>
    <shortdesc/>
    <taskbody>
        <context><image href="images/frontend.png" placement="break" id="image_kyx_zy4_b3"
                scale="40"/>In order to manage and use your cloud using euca2ools, it is necessary
            to supply the proper credentials to the Cloud Controller each time you enter a command. 
            This can be done by adding authentication arguments to each command at the command line
            or by setting authentication environment variables that are automatically used each time
            a command is run.  Setting and using environment variables is simpler.  In this section
            of the lab, you will download and install files that will automatically set the
            necessary environment variables for the cloud administrator user named <i>admin</i>. </context>
        <steps>
            <step>
                <cmd>On the front-end host, generate a set of credentials for the cloud
                    administrator named <i>admin</i>. </cmd>
                <info>
                    <codeblock># cd /root
# mkdir .euca
# cd .euca
# euca_conf --get-credentials admin.zip
# ls  </codeblock>
                    <note>Any time you download credentials; you are requesting a <i>new</i> set of
                        credentials. You are <i>not</i> retrieving an existing set of credentials.
                        There is no way to retrieve an existing set of credentials. </note>
                </info>
            </step>
            <step>
                <cmd>Unpackage the <filepath>admin.zip</filepath> file and secure the directory and
                    its contents using the permissions shown below. </cmd>
                <info>
                    <codeblock># unzip admin.zip
# chmod 700 /root/.euca
# chmod 600 /root/.euca/*   </codeblock>
                </info>
            </step>
            <step>
                <cmd>Using either the <cmdname>vi</cmdname> or <cmdname>nano -w</cmdname> editor,
                    edit root’s bash shell configuration file and add the <cmdname>source</cmdname>
                    command to the <i>end</i> of the file that will force all bash shells to execute
                    the commands listed in the <filepath>eucarc</filepath> file.  Do not close the
                    editor when finished as you will continue to edit this file in the next lab
                    step.</cmd>
                <info>
                    <codeblock># vi /root/.bashrc

source /root/.euca/eucarc </codeblock>
                </info>
            </step>
            <step>
                <cmd>With the <filepath>/root/.bashrc</filepath> file still open for editing, add a
                    new alias for the <cmdname>ssh</cmdname> command to the end of the list of
                    current <cmdname>alias</cmdname> commands.   Save your changes and exit the file
                    when finished. </cmd>
                <info>
                    <codeblock>alias  ssh=’ssh -o UserKnownHostsFile=/dev/null -o \
 StrictHostKeyChecking=no’  </codeblock>
                    <note>Adding this alias will cause the <cmdname>ssh</cmdname> command to
                        automatically run with options that configure it to <i>not</i> update or
                        check the <filepath>.ssh/known_hosts</filepath> file.   Preventing the use
                        of the <filepath>known_hosts</filepath> file when using
                            <cmdname>ssh</cmdname> in lab will be more convenient.  When the public
                        key associated with an IP address frequently changes, as will be the case
                        when you create and terminate instances which reuse the same IP address, you
                        would have to remove the IP address/public key entry in the
                            <filepath>known_hosts</filepath> file before being able to
                            <cmdname>ssh</cmdname> to a new instance.  Preventing the normal use of
                            the<filepath> known_hosts</filepath> file will remove the need to
                        manually edit and remove the IP address/public key entry each time an IP
                        address is reused for a new instance. </note>
                </info>
            </step>
            <step>
                <cmd>On the front-end host, force root’s bash shell to immediate reread the contents
                    of the <filepath>/root/.bashrc</filepath> file. </cmd>
                <info>
                    <codeblock># source /root/.bashrc  </codeblock>
                </info>
            </step>
            <step>
                <cmd>Verify that the <filepath>.bashrc</filepath> file was reread by checking for
                    the presence of EC2 environment variables in your shell. </cmd>
                <info>
                    <codeblock># env | grep EC2</codeblock>
                </info>
            </step>
        </steps>
    </taskbody>
</task>
